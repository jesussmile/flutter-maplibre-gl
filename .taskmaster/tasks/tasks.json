{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Native Build Integration",
        "description": "Set up the existing MapLibre GL example project (/Users/pannam/Desktop/flutter-maplibre-gl/maplibre_gl_example) to include the existing LERC native code from the flightcanvas_terrain directory and configure the build process for Android and iOS platforms.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/lerc_integration.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/cmake_configuration.md`, and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/platform_specific_implementation.md`. Note that the documentation was written for flutter_map and may need adaptation for MapLibre GL. Use the existing LERC library source code at `/Users/pannam/Desktop/flutter-maplibre-gl/lerc-master` instead of downloading it. Integrate the `flightcanvas_terrain` native code directory into the existing MapLibre GL example project structure. Configure `CMakeLists.txt` files for both Android (via NDK) and iOS to build the `lerc_wrapper.cpp` and link against the existing LERC library. Ensure the native build process is triggered correctly by the Flutter build. Verify native library outputs (.so for Android, .dylib/.framework for iOS) are generated and placed correctly for FFI linking. Use Flutter's built-in support for native code and CMake. Document all steps taken, challenges encountered, solutions implemented, and lessons learned during the integration process for future reference.",
        "testStrategy": "Run `flutter build apk` and `flutter build ios` to confirm the native libraries are built successfully without errors. Check the build output directories for the generated native library files.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Generate FFI Bindings and Create Dart Wrapper",
        "description": "Generate Dart FFI bindings for the C API defined in `lerc_wrapper.h` and create a high-level Dart wrapper class for easier interaction with the native LERC decoder functions within the MapLibre GL example project.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/dart_ffi_bindings.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/dart_ffi_integration.md`. Note that the documentation was written for flutter_map and may need adaptation for MapLibre GL. Use the `ffigen` tool (version ^0.1.0 or later recommended) to generate Dart bindings from `lerc_wrapper.h`. Configure `ffigen.yaml` to specify the header file, library name, and output file (`lerc_bindings.dart`). Create a Dart class, e.g., `LercDecoder`, that encapsulates the raw FFI calls, handling `Pointer` types and memory management. Implement methods like `decodeLerc` that call the native decoding function and return a structured Dart object or `TypedData` (like `Float32List`) containing the elevation data. Ensure proper error handling for native calls. Document the FFI binding process, any challenges encountered with different platforms, and solutions implemented for future reference.",
        "testStrategy": "Run `flutter pub run ffigen` to generate bindings. Write a simple Dart test case that loads the native library and calls a basic function (if available in the wrapper) to verify FFI setup and binding correctness.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Decoded Data Structure and Basic Decoding",
        "description": "Define Dart data structures to hold decoded LERC elevation data and implement the core logic for decoding LERC byte arrays using the Dart FFI wrapper within the MapLibre GL example project.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/basic_lerc_decoding.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/memory_management.md`, and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/raw_elevation_data_processing.md`. Note that the documentation was written for flutter_map and may need adaptation for MapLibre GL. Create a Dart class, e.g., `DecodedLercData`, to store the decoded elevation grid (e.g., as a `Float32List` or `Int16List` depending on precision needs, `Float32List` is generally safer for varying elevation ranges) along with metadata like width, height, and georeferencing information (if available from LERC or context). Implement a method in the `LercDecoder` class (or a separate service) that takes LERC compressed bytes (`Uint8List`), passes them to the native decoder via FFI, receives the decoded data pointer, copies it to a Dart `TypedData`, and returns a `DecodedLercData` object. Implement necessary memory cleanup for native allocations using `NativeFinalizer` or explicit `free` calls. Document the data structure design decisions, memory management strategies, and any performance considerations for future reference.",
        "testStrategy": "Obtain a sample LERC file or byte array. Write a Dart unit test that calls the decoding logic, verifies the output data structure is created, and checks basic properties like width, height, and potentially a few known elevation values if the sample data is controlled. Use `NativeFinalizer` tests to ensure memory is released.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create MapLibre GL Example Page",
        "description": "Create a new example page within the existing MapLibre GL example application specifically for demonstrating LERC terrain visualization.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/flutter_map_terrain_layer.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/basic_terrain_display_ui_controls.md`. Note that the documentation was written for flutter_map and will need significant adaptation for MapLibre GL. Add a new file, e.g., `terrain_page.dart`, in the example app's pages directory at `/Users/pannam/Desktop/flutter-maplibre-gl/maplibre_gl_example/lib/`. This page should contain a `MapWidget` from the `flutter_maplibre_gl` plugin. Set up basic map controls (zoom, pan). This page will serve as the container for integrating the terrain visualization layer and UI controls. Document the integration approach with the existing example app structure, including how the page was added to the navigation system and any modifications needed to the existing codebase.",
        "testStrategy": "Add a navigation entry to the main example app menu for the new page. Run the example app and navigate to the new page to ensure it loads correctly and displays a basic map.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Basic Terrain Layer Rendering",
        "description": "Implement a mechanism to render the decoded terrain elevation data on the MapLibre GL map within the existing example app, starting with a simple elevation-based coloring.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/flutter_map_terrain_layer.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/flutter_map_tile_provider.md`, and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/altitude_based_terrain_coloring.md`. Note that these documents are for flutter_map and will require significant adaptation for MapLibre GL. This is a critical integration point. Since `flutter-maplibre-gl` doesn't have a direct 'custom layer' API like some other map SDKs, the most direct path involves either: 1) Using a `PlatformView` to render the terrain on top, synchronized with the map, or 2) Passing tile data and rendering commands to the native MapLibre GL view via `MethodChannel` to draw within its rendering loop (more complex but better integrated). Given the PRD mentions integrating with the 'rendering pipeline', the MethodChannel approach is preferred. Implement a Dart component that listens to map camera changes, determines visible terrain tiles, requests LERC data for those tiles, decodes it (using Task 3), and sends the decoded data (or a representation) and tile coordinates to the native side via `MethodChannel`. On the native side (Android/iOS), receive this data and implement custom OpenGL/Vulkan rendering logic within the MapLibre GL view's rendering callback (if the native SDK allows hooking into it) or as an overlay. Start with a simple color mapping (e.g., green for low altitude, brown for high). Implement coordinate conversion from map tile coordinates to the decoded LERC data grid indices. Document the integration approach thoroughly, including alternative approaches considered, challenges encountered, and solutions implemented. Create diagrams or flowcharts if needed to explain the architecture for future reference.",
        "testStrategy": "Load a map view covering an area with known terrain data. Verify that colored terrain appears on the map corresponding to elevation. Pan and zoom to ensure new tiles are loaded and rendered correctly.",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Enhanced Visualization Modes",
        "description": "Implement enhanced terrain visualization modes in the MapLibre GL example, including altitude-based color gradients, reference altitude highlighting, warning levels, and altitude bucketing.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/multiple_terrain_rendering_modes.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/altitude_based_terrain_coloring.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/reference_altitude_and_warning_levels.md`, and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/altitude_bucketing.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL. Extend the rendering logic (either in Dart if rendering to texture, or native shaders if rendering natively) to support different coloring algorithms. Implement a continuous color gradient based on elevation. Add logic to highlight areas above/below a user-defined 'reference altitude' and 'warning levels' using distinct colors or overlays. Implement altitude bucketing by quantizing elevation values into discrete ranges before coloring to create smoother transitions or distinct elevation bands. These modes should be selectable. Document each visualization mode in detail, including the algorithms used, color schemes selected, and how they help users interpret terrain data. Include screenshots or examples showing the different modes and their effects. Document any performance implications of each mode.",
        "testStrategy": "Add internal flags or parameters to switch between visualization modes. Manually test each mode with sample data to ensure colors and highlighting appear as expected based on elevation values and configured reference/warning levels. Verify bucketing reduces visual noise.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Develop Terrain UI Controls",
        "description": "Develop user interface controls within the MapLibre GL example page for adjusting terrain visualization parameters and switching modes.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/basic_terrain_display_ui_controls.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/enhanced_visualization_ui_controls.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL. Add Flutter UI widgets (e.g., `Slider` for reference altitude, `DropdownButton` or `Radio` buttons for visualization modes, `Switch` for toggling visibility) to the `terrain_page.dart`. Connect these UI controls to the terrain layer/rendering logic (e.g., via `Provider`, `Bloc`, or `ChangeNotifier`) to dynamically update visualization parameters. Ensure UI updates trigger map redraws where necessary. Document the UI design decisions, state management approach, and how the controls interact with the rendering pipeline. Include screenshots of the UI, explanations of each control's purpose, and any usability considerations that influenced the design. Document any performance optimizations implemented to ensure smooth UI interaction while rendering terrain.",
        "testStrategy": "Interact with each UI control on the page. Verify that changing sliders, toggles, or dropdowns correctly updates the terrain visualization on the map in real-time. Ensure toggling visibility hides/shows the terrain layer.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Caching and Performance Optimizations",
        "description": "Implement efficient caching for decoded terrain data tiles and performance optimizations like throttling map updates in the MapLibre GL example.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/lerc_data_caching.md`, `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/performance_optimization_techniques.md`, and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/throttling_and_debouncing.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL. Create a cache mechanism (e.g., an LRU cache using `LinkedHashMap`) to store `DecodedLercData` objects keyed by tile coordinates. When a tile is needed, check the cache first before decoding. Implement a cache eviction policy to manage memory usage. For performance, throttle the frequency of terrain updates triggered by rapid map movements (pan/zoom) using techniques like `Timer.periodic` or debouncing/throttling utilities from packages like `collection` or `flutter_hooks`. Optimize memory usage during decoding and data transfer. Document the caching strategy in detail, including cache size considerations, eviction policies, and memory usage analysis. Create performance benchmarks comparing the application with and without optimizations. Document any platform-specific performance issues encountered (iOS vs Android) and how they were addressed. Include memory usage patterns and recommendations for future optimization.",
        "testStrategy": "Pan and zoom the map rapidly over an area with terrain. Monitor performance (FPS) and memory usage using profiling tools (Flutter DevTools). Verify that caching reduces decoding time for revisited areas. Ensure throttling prevents excessive updates during gestures.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Hillshading Visualization",
        "description": "Add support for hillshade visualization using pre-processed LERC files in the MapLibre GL example rather than using MapLibre's built-in hillshade.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/hillshading_support.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/multiple_terrain_rendering_modes.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL, and discusses both real-time and pre-processed hillshade approaches. As specified in the PRD, implement support for hillshade visualization using pre-processed LERC2 files that are already converted to look like hillshade, rather than using MapLibre's built-in hillshade layer. Create the necessary loading and rendering mechanisms for these specialized LERC2 files. Integrate this hillshade data into the rendering pipeline. This might involve generating a separate hillshade texture/layer or combining the hillshade data with the existing terrain visualization. Document the hillshade implementation approach, including how the pre-processed LERC2 files are structured and how they differ from standard elevation data. Include information about where to obtain or how to generate these specialized hillshade LERC2 files. Document any rendering considerations specific to hillshade data.",
        "testStrategy": "Add hillshading as a selectable visualization mode (requires Task 7). Switch to hillshade mode and verify that terrain features (hills, valleys) are rendered with appropriate shading. Compare against known hillshade examples if possible.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Altitude Readout at Position",
        "description": "Implement functionality in the MapLibre GL example to display the elevation at the map's current center position or a user-tapped location.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/raw_elevation_data_processing.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/basic_terrain_display_ui_controls.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL. Listen to map camera position changes or tap gestures using the `MapWidget` controller. Convert the map's geographical coordinate (latitude, longitude) to the corresponding tile coordinate and then to the index within the decoded elevation data grid for that tile. Sample the elevation value from the `DecodedLercData` (Task 3). Implement interpolation if the exact coordinate doesn't fall directly on a grid point. Display the sampled altitude in a UI element on the page (requires Task 7 for UI integration). Document the coordinate conversion process in detail, including the mathematical formulas used for translating between geographical coordinates and tile coordinates. Explain the interpolation algorithm used and its accuracy considerations. Document any edge cases handled (e.g., areas without elevation data, boundaries between tiles) and how they were addressed.",
        "testStrategy": "Pan the map or tap on different locations with known elevation values. Verify that the displayed altitude readout is accurate and updates correctly as the map position changes or on tap. Test interpolation by tapping between grid points.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Cross-Platform Testing and Finalization",
        "description": "Perform comprehensive testing of the LERC terrain visualization on different devices and platforms (Android, iOS) and finalize performance optimizations and documentation for the MapLibre GL example.",
        "details": "Refer to the following documentation for guidance: `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/platform_specific_implementation.md` and `/Users/pannam/Desktop/flutter-maplibre-gl/documentation/performance_optimization_techniques.md`. Note that the documentation was written for flutter_map and will need adaptation for MapLibre GL. Test all implemented features (visualization modes, UI controls, caching, hillshading, altitude readout) on a range of target devices, including mid-range devices as specified in success metrics. Identify and fix performance bottlenecks using profiling tools. Ensure memory usage is within acceptable limits. Create comprehensive documentation covering setup, usage, and implementation details of the LERC terrain example. Compile all task-specific documentation into a unified reference document for future developers working with this code. Create a detailed troubleshooting guide addressing common issues that may be encountered. Document platform-specific differences and considerations. Include references to the original documentation in `/Users/pannam/Desktop/flutter-maplibre-gl/documentation` for additional details. Create a final report summarizing what worked well, what was challenging, and recommendations for future improvements.",
        "testStrategy": "Execute test plans on multiple Android and iOS devices. Verify functionality, performance, and stability across platforms. Review and complete project documentation.",
        "priority": "high",
        "dependencies": [
          6,
          7,
          8,
          9,
          10
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-25T01:05:53.970Z",
      "updated": "2025-06-25T01:05:53.970Z",
      "description": "Tasks for master context"
    }
  }
}