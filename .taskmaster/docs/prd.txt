# MapLibre GL LERC Terrain Visualization PRD

## Project Overview

This project aims to extend the MapLibre GL Flutter example application to support LERC (Limited Error Raster Compression) terrain visualization. The implementation will leverage existing LERC native code from the flightcanvas_terrain directory and integrate it with the MapLibre GL mapping library to create an interactive terrain visualization example.

## Background

The MapLibre GL Flutter plugin provides 2D mapping capabilities, but currently lacks terrain visualization features. Adding LERC terrain visualization will enhance the mapping experience by allowing users to see elevation information directly on the map, which is particularly valuable for aviation, hiking, and other applications where terrain awareness is important.

LERC is an open-source data format developed by Esri that provides efficient lossless and controlled lossy compression for raster data. It's particularly well-suited for elevation data as it maintains precision while reducing file size significantly.

## Objectives

1. Integrate the existing LERC decoder native code with the MapLibre GL example app
2. Create a new example page that demonstrates terrain visualization
3. Implement multiple visualization modes for terrain data
4. Provide intuitive UI controls for adjusting terrain visualization parameters
5. Ensure performance optimization for smooth interaction on mobile devices

## Target Audience

- Developers working on mapping applications that require terrain visualization
- Flutter developers interested in integrating native code with Flutter applications
- Geospatial professionals working with elevation data

## Requirements

### Core Features

1. **LERC Integration**
   - Integrate the existing LERC decoder native library via FFI
   - Create Dart bindings for the C++ LERC wrapper functions
   - Set up proper memory management for decoded terrain data
   - Support multi-threaded decoding using isolates

2. **MapLibre GL Terrain Layer**
   - Create a custom terrain layer for MapLibre GL
   - Implement tile provider for terrain data
   - Support caching of decoded elevation data
   - Implement proper coordinate conversion between different systems

3. **Terrain Visualization**
   - Implement altitude-based color gradients for terrain
   - Add support for reference altitude and warning levels
   - Implement altitude bucketing for smoother transitions
   - Add support for hillshade visualization using pre-processed LERC files (not using MapLibre's built-in hillshade layer)
   - Support multiple rendering modes (gradient, discrete colors, etc.)

4. **User Interface**
   - Add controls for adjusting reference altitude
   - Create UI for switching between visualization modes
   - Add option to toggle terrain visibility
   - Implement altitude readout at the current position

5. **Performance Optimization**
   - Implement efficient caching mechanisms for terrain data
   - Add throttling for frequent altitude changes
   - Optimize memory usage for large terrain datasets
   - Support tile-based rendering for efficient display

### Technical Requirements

1. **Native Code Integration**
   - Use the existing LERC native code from flightcanvas_terrain
   - Create proper FFI bindings using ffigen
   - Ensure proper memory management across Flutter/native boundary
   - Support Android and iOS platforms

2. **MapLibre GL Integration**
   - Create a new example page in the MapLibre GL example app
   - Implement terrain layer compatible with MapLibre GL rendering pipeline
   - Support proper interaction with existing map controls
   - Ensure compatibility with map style changes

3. **Data Handling**
   - Support decoding of LERC format terrain data
   - Implement coordinate conversion between map and terrain coordinates
   - Create proper elevation data structures
   - Support sampling and interpolation of elevation data

4. **User Experience**
   - Ensure smooth and responsive terrain visualization
   - Provide intuitive UI for adjusting terrain parameters
   - Support gestures for map navigation
   - Implement smooth transitions for altitude changes

## Implementation Phases

### Phase 1: Basic Integration
- Set up FFI bindings for LERC native code
- Create basic terrain visualization page
- Implement simple elevation-based coloring

### Phase 2: Enhanced Visualization
- Add multiple visualization modes
- Implement reference altitude and warning levels
- Create UI controls for terrain parameters
- Add altitude bucketing for smoother transitions

### Phase 3: Advanced Features
- Implement hillshading support
- Add caching for decoded LERC data
- Implement performance optimizations
- Add advanced UI controls

### Phase 4: Testing and Finalization
- Test on different devices and platforms
- Optimize for performance
- Create comprehensive documentation
- Finalize the example implementation

## Technical Implementation Approach

This section outlines the technical approach to implementing the LERC terrain visualization in the MapLibre GL example.

### 1. Native Code Integration

The implementation will leverage the existing LERC native code from the flightcanvas_terrain directory. The native code is a C++ wrapper around the LERC library that provides functions for decoding LERC data and extracting elevation information.

Key components:
- `lerc_wrapper.h`: C API interface for FFI
- `lerc_wrapper.cpp`: Implementation that calls LERC functions
- `CMakeLists.txt`: Build configuration for native code

### 2. Dart FFI Bindings

The implementation will use Dart FFI to call the native LERC functions from Flutter code. This involves creating proper bindings and managing memory allocation/deallocation.

Key components:
- `ffigen.yaml`: Configuration for generating bindings
- `lerc_bindings.dart`: Generated FFI bindings
- `lerc_decoder.dart`: High-level Dart interface for LERC decoding

### 3. Terrain Data Structures

The implementation will use custom data structures for storing and processing elevation data.

Key components:
- `DecodedLercData`: Class for storing decoded elevation data
- Methods for accessing elevation at specific coordinates
- Utilities for extracting and processing elevation regions

### 4. MapLibre GL Integration

The implementation will create a new example page in the MapLibre GL example app that demonstrates terrain visualization.

Key components:
- `terrain_page.dart`: New example page for terrain visualization
- Custom layer implementation for MapLibre GL
- Integration with MapLibre GL map controller

### 5. Visualization Techniques

The implementation will support multiple visualization techniques for terrain data.

Key components:
- Altitude-based coloring algorithms
- Hillshading algorithms
- Reference altitude and warning level visualization
- Altitude bucketing for smoother transitions

### 6. User Interface

The implementation will provide a user interface for controlling terrain visualization parameters.

Key components:
- UI for adjusting reference altitude
- Controls for switching between visualization modes
- Option to toggle terrain visibility
- Altitude readout at the current position

## Success Metrics

1. Successful integration of LERC terrain visualization with MapLibre GL
2. Smooth performance on mid-range mobile devices
3. Support for different terrain visualization modes
4. Intuitive user interface for controlling terrain parameters
5. Proper memory management for large terrain datasets

## Appendix

### Reference Documentation

For detailed implementation guidance and troubleshooting, refer to the comprehensive documentation available in:
`/Users/pannam/Desktop/flutter-maplibre-gl/documentation`

This directory contains detailed information about each aspect of the LERC implementation, from native code integration to advanced visualization techniques.

### Glossary

- **LERC**: Limited Error Raster Compression, a data format for efficient compression of raster data
- **FFI**: Foreign Function Interface, a mechanism for calling native functions from Flutter
- **MapLibre GL**: An open-source mapping library that provides 2D map rendering
- **Hillshading**: A technique for visualizing terrain by simulating shadows based on a light source
- **Reference Altitude**: The current altitude used as a reference for coloring terrain
- **Altitude Bucketing**: Grouping elevation values into discrete ranges to reduce visual flickering
- **Throttling**: Limiting the frequency of terrain updates to improve performance